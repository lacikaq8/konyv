<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
            A módosított polártranszformációs normális generátor beprogramozása Java nyelven. Mutassunk rá,
            hogy a mi természetes saját megoldásunk (az algoritmus egyszerre két normálist állít elő, kell egy
            példánytag, amely a nem visszaadottat tárolja és egy logikai tag, hogy van-e tárolt vagy futtatni kell
            az algot.) és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
        </para>
        <para>
            Ugyanezt írjuk meg C++ nyelven is! (lásd még UDPROG repó: source/labor/polargen)                
        </para>
        <para>
           <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Az egyik korábbi fejezetben már néztük a C++, és Java forrást. Most azt fogjuk megnézni, hogy a hivatalos Java
            <function>random</function> szám generátor mennyire hasonlít a mi megoldásunkra. 
        </para>
        <para>
            Akkor jöjjön is a saját megoldásunk.
            <programlisting language="java"><![CDATA[
public class PolarGenerator
{
    boolean nincsTarolt = true;
    double tarolt;
    
    public double kovetkezo() 
    {
        if(nincsTarolt)
        {
            double u1, u2, v1, v2, w;
            do{
                u1 = Math.random();
                u2 = Math.random();
                v1 = 2* u1 -1;
                v2 = 2* u2 -1;
                w = v1*v1 + v2*v2;
            } while (w>1);
            
            double r = Math.sqrt((-2 * Math.log(w) / w));
            tarolt = r * v2;
            nincsTarolt = !nincsTarolt;
            return r * v1;
        }
        else
        {
            nincsTarolt = !nincsTarolt;
            return tarolt;
        }
}
            ]]></programlisting>
        </para>
        <para>
            A program a futtatás során generál 2 random számot. Az egyiket eltárolja, a másikat pedig visszaadja.
            Majd ezek után megvizsgáljuk, hogy van-e tárolt elem. Ezért van szükségünk a <function>nincsTarolt</function>
            logikai változóra, mely alapértelmezetten igaz. A <function>double</function> függvény, annyit csinál, hogy megnézi az előző változót és ha igaz, akkor kiszámolja a számokat. Az egyik számot eltároljuk majd a
            <function>nincsTarolt</function>-at hamisra állítja. Így elkerülhetjük azt, hogy a programnak feleslegesen kelljen
            újra random számot generálnia. 
        </para>
        <para>
            Most nézzük meg az OpenJDK <filename>Random.java</filename>
            forrásában, hogyan oldották meg ezt.
            <programlisting language="java"><![CDATA[
    private double nextNextGaussian;
    private boolean haveNextNextGaussian = false;
                
    public synchronized double nextGaussian() {
        // See Knuth, ACP, Section 3.4.1 Algorithm C.
        if (haveNextNextGaussian) {
            haveNextNextGaussian = false;
            return nextNextGaussian;
        } else {
            double v1, v2, s;
            do {
                v1 = 2 * nextDouble() - 1; // between -1 and 1
                v2 = 2 * nextDouble() - 1; // between -1 and 1
                s = v1 * v1 + v2 * v2;
            } while (s >= 1 || s == 0);
            double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
            nextNextGaussian = v2 * multiplier;
            haveNextNextGaussian = true;
            return v1 * multiplier;
        }
    }
            ]]></programlisting>
            Ha a két kódot megnézzük, akkor arra jutunk, hogy megegyeznek.
        </para>
        <para>
            A továbbiakban a C++-os megoldást fogjuk megnézni.
            <programlisting language="c++"><![CDATA[
class PolarGen {
	public:
		PolarGen(); //konstruktor
		~PolarGen(){} //destruktor
		double kovetkezo(); //random lekérés
	private:
		bool nincsTarolt;
		double tarolt; //random értéke
};
PolarGen::PolarGen() { //a konstruktor kifejtése
	nincsTarolt = false;
	std::srand (std::time(NULL)); //random inicializálás
};
double PolarGen::kovetkezo() { //random lekérő függvény kifejtése
	if (nincsTarolt)
{
		double u1, u2, v1, v2, w;
		do{
			u1 = std::rand () / (RAND_MAX + 1.0); //innentől jön az algoritmus
			u2 = std::rand () / (RAND_MAX + 1.0);
			v1 = 2 * u1 - 1;
			v2 = 2 * u2 - 1;
			w = v1 * v1 + v2 * v2;
		    }
		while (w > 1);
		double r = std::sqrt ((-2 * std::log (w)) / w);
		tarolt = r * v2; 
		nincsTarolt = !nincsTarolt;
		return r * v1; //idáig tart az algoritmus
	}
	
	else
	{
		nincsTarolt = !nincsTarolt; //ha van korábbi random érték, akkor azt adja vissza
		return tarolt;
	}
};    
            ]]></programlisting>
        </para>
        
    </section>        

    <section>
        <title>Homokózó</title>
        <para>
            Írjuk át az első védési programot (LZW binfa) C++ nyelvről Java nyelvre, ugyanúgy működjön!
            Mutassunk rá, hogy gyakorlatilag a pointereket és referenciákat kell kiirtani és minden máris működik
            (erre utal a feladat neve, hogy Java-ban minden referencia, nincs választás, hogy mondjuk egy
            attribútum pointer, referencia vagy tagként tartalmazott legyen).
        </para>
        <para>
            Miután már áttettük Java nyelvre, tegyük be egy Java Servletbe és a böngészőből GET-es kéréssel
            (például a böngésző címsorából) kapja meg azt a mintát, amelynek kiszámolja az LZW binfáját!
        </para>
        <para>
            Megoldás forrása:                 
        </para>
        <para>
           <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Ahogy a feladat leírásásban olvasható azt fogjuk megnézni, hogy néz ki az LZW BinFa Java nyelven.
            Majd ezek után megismerkedünk azzal is, hogyan lehet ezt Java Servlet-ként böngészőben futtatni.
            A kód a következő képpen néz ki:
        </para>
        <para>
        <programlisting language="java"><![CDATA[
class LZWBinFa
{
    public LZWBinFa ()
    {
        fa = gyoker;
    }
    public void hozzarendel(char b)
    {
        if (b == '0')
        {
            if (fa.nullasGyermek () == null)
            {
                Csomopont uj = new Csomopont ('0');
                fa.ujNullasGyermek (uj);
                fa = gyoker;
            }
            else			
            {
                fa = fa.nullasGyermek ();
            }
        }
        else
        {
            if (fa.egyesGyermek () == null)
            {
                Csomopont uj = new Csomopont ('1');
                fa.ujEgyesGyermek (uj);
                fa = gyoker;
            }
            else
            {
                fa = fa.egyesGyermek ();
            }
        }
    }
    public void kiir ()
    {
        melyseg = 0;
        kiir (gyoker, new java.io.BufferedWriter(new java.io.OutputStreamWriter(System.out)));
    }
    public int getMelyseg ()
    {
        melyseg = maxMelyseg = 0;
        rmelyseg (gyoker);
        return maxMelyseg - 1;
    }
    public double getAtlag ()
    {
        melyseg = atlagosszeg = atlagdb = 0;
        ratlag (gyoker);
        atlag = ((double) atlagosszeg) / atlagdb;
        return atlag;
    }
    public double getSzoras ()
    {
        atlag = getAtlag ();
        szorasosszeg = 0.0;
        melyseg = atlagdb = 0;
        rszoras (gyoker);
        if (atlagdb - 1 > 0)
            szoras = java.lang.Math.sqrt (szorasosszeg / (atlagdb - 1));
        else
            szoras = java.lang.Math.sqrt (szorasosszeg);
        return szoras;
    }
    public void kiir (java.io.BufferedWriter os)
    {
        melyseg = 0;
        kiir (gyoker, os);
    }
    private class Csomopont
    {
        public Csomopont (char b)
        {
            betu = b;
            balNulla = null;
            jobbEgy = null;
        }
        public final Csomopont nullasGyermek ()
        {
            return balNulla;
        }
        public final Csomopont egyesGyermek ()
        {
            return jobbEgy;
        }
        public void ujNullasGyermek (Csomopont gy)
        {
            balNulla = gy;
        }
        public void ujEgyesGyermek (Csomopont gy)
        {
            jobbEgy = gy;
        }
        public final char getBetu ()
        {
            return betu;
        }
        private char betu;
        private Csomopont balNulla;
        private Csomopont jobbEgy;
    }
    private Csomopont fa;
    private int melyseg, atlagosszeg, atlagdb;
    private double szorasosszeg;
    public void kiir (Csomopont elem, java.io.BufferedWriter os)
    {
        if (elem != null)
        {
            try{
            ++melyseg;
            kiir (elem.egyesGyermek (), os);
            for (int i = 0; i < melyseg; ++i)
                os.write("---");
            os.write(elem.getBetu () + "(" + (melyseg - 1) + ")\n");
            kiir (elem.nullasGyermek (), os);
            --melyseg;
            }
            catch(java.io.IOException e){
                System.out.println("Csomópont írása nem sikerült.");
            }
        }
    }
    protected Csomopont gyoker = new Csomopont('/');
    protected int maxMelyseg;
    protected double atlag, szoras;
    protected void rmelyseg (Csomopont elem)
    {
        if (elem != null)
        {
            ++melyseg;
            if (melyseg > maxMelyseg)
                maxMelyseg = melyseg;
            rmelyseg (elem.egyesGyermek ());
            rmelyseg (elem.nullasGyermek ());
            --melyseg;
        }
    }
    protected void ratlag(Csomopont elem) {
        if (elem != null) {
            ++melyseg;
            ratlag(elem.egyesGyermek());
            ratlag(elem.nullasGyermek());
            --melyseg;
            if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
                ++atlagdb;
                atlagosszeg += melyseg;
            }
        }
    }
    protected void rszoras(Csomopont elem) {
        if (elem != null) {
            ++melyseg;
            rszoras(elem.egyesGyermek());
            rszoras(elem.nullasGyermek());
            --melyseg;
            if (elem.egyesGyermek() == null && elem.nullasGyermek() == null) {
                ++atlagdb;
                szorasosszeg += ((melyseg - atlag) * (melyseg - atlag));
            }
        }
    }
            ]]></programlisting>
            Ahogy látható, semmilyen címképző operátorra nincs szükség a Java kódban.
            Az megfigyelhető, hogy az osztály konstruktora az nagyon hasonlít az eredetire. Viszont a destruktorra és a <function>szabadit</function>-ra nincs szükségünk.
            Ez azért van, mert a Java nyelv automatikusan törli azokat az objektumokat a memóriából, amire
            már nincs érvényes referencia. Lehet úgy példányosítani egy osztályt, mint ahogy C++-ban a sima változókat
            deklaráltuk
            <programlisting language="java"><![CDATA[>
                Csomopont fa;
            ]]></programlisting>
            Ebben az esetben egy <function>null</function> referenciát kapunk, vagyis ennek még át kell adni egy
            bizonyos memóriacímen található objektumot. Jelen esetben ez nem okoz problémát a programban, mert a
            a <function>fa</function> objektumreferenciának átadjuk a <function>gyoker</function> által
            mutatott objektumot. az átírás során én nem inicializáltam a <function>gyoker</function>
            refenciát, így hibát dobott a program, mivel utána a <function>fa</function> referencia is
            null referencia maradt, mely által mutatott objektumra hivatkozunk a későbbi függvényekbe.
            C++-hoz hasonlóan a <function>new</function> operátorral tudunk tárhelyet foglalni, mely Java-ban
            referenciát ad át.
    </para>
    <para>
            A Java nyelv nem támogatja a operátor túlterhelést, új metódus jelent meg a programban, a 
            <function>hozzarendel</function>. Mostmár ezzel lehet a fába beletteni a nullákat és az egyeseket.
    </para>
    <para>
            És most következik a <function>main</function> függvény. 
            <programlisting language="java"><![CDATA[
public static void main (String[] args)
{
    if (args.length != 3)
    {
        usage ();
        System.exit(-1);
    }

    String inFile = args[0];

    if (args[1].charAt(1) != 'o')
    {
        System.out.println("Missing -o argument");
        usage ();
        System.exit(-2);
    }

try {
        java.io.FileInputStream beFile = new java.io.FileInputStream(inFile);
        java.io.DataInputStream beFile_datastream = new java.io.DataInputStream(beFile);
        java.io.BufferedReader beFile_bufferedreader = new java.io.BufferedReader(new java.io.InputStreamReader(beFile_datastream));
        
        java.io.FileWriter kiFile = new java.io.FileWriter(args[2]);
        java.io.BufferedWriter kiFile_bufferedwriter = new java.io.BufferedWriter(kiFile);
        LZWBinFa binFa = new LZWBinFa(); // s nyomjuk majd be az LZW fa objektumunkba
        
        int c;
        while ((c = beFile_bufferedreader.read()) != -1){
            if (c == 0x0a) {
                break;
            }
        }
        boolean kommentben = false;

    while ((c = beFile_bufferedreader.read()) != -1)
    {
 
        if (c == 0x3e) {			// > karakter
                kommentben = true;
                continue;
            }

        if (c == 0x0a) {			// újsor
            kommentben = false;
            continue;
        }

        if (kommentben) {
            continue;
        }

        if (c == 0x4e) // N betű
        {
            continue;
        }

        for (int i = 0; i < 8; ++i) {
            if ((c & 0x80) == 128) // ha a vizsgált bit 1, akkor az '1' betűt nyomjuk az LZW fa objektumunkba
            {
                binFa.hozzarendel('1');
            } else // különben meg a '0' betűt:
            {
                binFa.hozzarendel('0');
            }
            c <<= 1;
        }

    }


    binFa.kiir(kiFile_bufferedwriter);
    kiFile_bufferedwriter.write("depth = " + binFa.getMelyseg() + '\n');
    kiFile_bufferedwriter.write("mean = " + binFa.getAtlag()+ '\n');
    kiFile_bufferedwriter.write("var = " + binFa.getSzoras() + '\n');

    kiFile_bufferedwriter.close();
    kiFile.close ();
    beFile_datastream.close ();
    beFile_bufferedreader.close();
    beFile.close();
    } catch (Exception e) {
        for (StackTraceElement elem : e.getStackTrace()) {
            System.err.println(elem);
        }
    }

}
            ]]></programlisting>
            A függvény ugyanazt csinálja, mint korábban. Azonban már nem 
            4 paraméternek kell lennie, hanem csak 3-nak. Ez abból következik, hogy Java-ban az
            első paraméter nem a program neve, hanem az általunk megadott első paraméter a 
            program neve után. Tehát leellenőrizzük, hogy meg van-e minden szükséges paraméter.
            Ezután jön a <function>try-catch</function> blokk.
            Java-ban a kivételkezelés sok esetben elvárásnak számít. Jelen esetben a fájlkezelés
            miatt volt rá szükség, mivel enélkül le se fordulna a kód. De ezzel az esetleges
            null referenciákra való hivatkozást is ki tudjuk szűrni.
            Először megnyitjuk a bemenethez és a kimenethez szükséges fájlokat. Ehhez a java.io osztályait
            használjuk. Ezután pedig elkezdjük beolvasni a forrást, és az abban lévő betűk függvényében
            0-kal és 1-kel feltölteni a fát. A <function>for</function> ciklust kellett egy kicsit átalakítani, 
            mivel Java-ban a bájtsorrend big-endian, ezért nem 1-el kell egyenlőnek lennie a
            <function><![CDATA[(c & 0x80)]]></function> kifejezésnek, hanem 128-al, ahhoz, hogy 
            1-est nyomjunk a fába. Majd a fát és annak mélységét, átlagát, szórását kiírjuk a 
            kimenetként kapott fájba. Azt érdemes tudni, hogy a <function>BufferedWriter</function>
            osztály nem azonnal írja ki a fájlba a tartalmat, hanem csak akkor, amikor bezárjuk az 
            általa megnyitott fájlt. Tehát ha ezt elfelejtjük megtenni, akkor ne lepődjünk meg a
            program eredménye láttán.
        </para>
    <para>
            A továbbiakban pedig átalakítjuk a programot Java 
            Servletté. Ebben segítségünkre lesz az Apache Tomcat webszerver. 
            Első lépésként letöltjük a legújabb verzióját.
            (<link xlink:href="http://tomcat.apache.org/">http://tomcat.apache.org/</link>)
            Ki kell csomagolni, majd /bin/startup.sh-val tudjuk elindítani a 
            szervert, leállítani pedig a /bin/shutdown.sh-val lehet. A módosított
            java forrásból készített class fájlt
            a /webapps/ROOT/WEB-INF/classes mappába kell helyezni, majd 
            a /webapps/ROOT/WEB-INF/web.xml fájlba el kell helyezni a következő
            sorokat:
            <programlisting language="xml"><![CDATA[
<servlet>
   <servlet-name>LZWBinFa</servlet-name>
   <servlet-class>LZWBinFa</servlet-class>
</servlet>

<servlet-mapping>
   <servlet-name>LZWBinFa</servlet-name>
   <url-pattern>/LZWBinFa</url-pattern>
</servlet-mapping>
            ]]></programlisting>
            Fontos, hogy ezeket a <function>webapp</function> tagak közé kell helyezni.
            Ha ezekkel megvagyunk, akkor már lehet futtatni a böngészőben 
            a programot.
            Nézzük meg, hogy milyen módosításokat kellett végezni az eredeti 
            forráson.
            <programlisting language="java">
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;


public class LZWBinFa extends HttpServlet
{
                ...
}
            </programlisting>
            Az első lényeges dolog, hogy importálni kell a Java Servlethez szükséges csomagokat.
            Ezeket a <function>javac</function> nem találja meg azonnal, mivel 
            a <filename>servlet-api.jar</filename>-t nem tartalmazza a Java
            JDK. Ezt a Tomcat webserverrel együtt kapjuk meg, ezért a classpath-t
            meg kell adni a <function>javac</function> számára. Ehhez a -cp
            kapcsolót használhatjuk.
            <programlisting>
                javac -cp /path/to/apache-tomcat-9.0.xx/lib/servlet-api.jar LZWBinFa.java
            </programlisting>
            A másik, amit egyből észre lehet venni, hogy az osztályunk a 
            HttpServlet osztály leszármazottja. Enélkül nem tudnánk 
            <function>Servlet</function>-ként használni a programot. Az 
            osztályunk konstruktorára már nincs szükség, mivel nincs 
            <function>main</function> függvény sem. A megmaradt 
            tagfüggvények nagy része nem változott. Kivétel a 
            <function>kiir</function> függvény, mely most a 
            az <function>LZWBinFa</function> tagváltozójába, 
            a <function>kimenet</function>-be építi fel a fát.
            <programlisting language="java"><![CDATA[
    public void kiir (Csomopont elem)
    {
        // Nem létező csomóponttal nem foglalkozunk... azaz ez a rekurzió leállítása
        if (elem != null)
        {

            ++melyseg;
            kiir (elem.egyesGyermek ());
            // ez a postorder bejáráshoz képest
            // 1-el nagyobb mélység, ezért -1
            for (int i = 0; i < melyseg; ++i)
                kimenet.append("---");
            kimenet.append(elem.getBetu () + "(" + (melyseg - 1) + ")<br>\n");
            kiir (elem.nullasGyermek ());
            --melyseg;
            
        }
    } 
            ]]></programlisting>
            A <function>main</function> függvényt a <function>CreateStringBuffer</function>
            váltotta fel. Lényegében ugyan azt a szerepet látja el, annyi különbséggel, hogy
            ez már egy tagfüggvénye az osztályunknak.
            <programlisting><![CDATA[
public void CreateStringBuffer(String bemenet)
{
    for(int i = 0; i < bemenet.length(); ++i){
        int c = bemenet.charAt(i);
        if(c == 0x0a){
            break;
        }
    }
    boolean kommentben = false;
        
        
    for(int i = 0; i < bemenet.length(); ++i)
    {
        int c = bemenet.charAt(i);
 
        if (c == 0x3e) {			// > karakter
                kommentben = true;
                continue;
            }

        if (c == 0x0a) {			// újsor
            kommentben = false;
            continue;
        }

        if (kommentben) {
            continue;
        }

        if (c == 0x4e) // N betű
        {
            continue;
        }

       
        for (int j = 0; j < 8; ++j) {
           
            if ((c & 0x80) == 128) 
            {
                hozzarendel('1');
            } else 
            {
                hozzarendel('0');
            }
            c <<= 1;
        }

    }
    
    kiir();
    kimenet.append("depth = " + getMelyseg() + "<br>\n");
    kimenet.append("mean = " + getAtlag()+ "<br>\n");
    kimenet.append("var = " + getSzoras() + "<br>\n");

    }

            ]]></programlisting>
            Már nincs szükség a fájlkezeléshez szükséges objektumokra, mivel a 
            kiírás a <function>bemenet</function> bufferbe történik. Az utolsó, és
            egyben legfontosabb függvény pedig a <function>doGet</function>
            függvény, mely a <function>HttpServlet</function> osztály
            egy tagfüggvénye. Ez szolgál arra, hogy GET kérést intézzünk a 
            szerver felé.
            <programlisting language="java"><![CDATA[
public void doGet(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
      
      // Set response content type
      response.setContentType("text/html");
      
    if(request.getParameter("bemenet") == null){
        return;
    }
    else
      CreateStringBuffer(request.getParameter("bemenet"));
    
    PrintWriter out = response.getWriter();
    String title = "LZWBinFa";
    String docType =
         "<!doctype html public \"-//w3c//dtd html 4.0 " + "transitional//en\">\n";
         
    out.println(docType +
         "<html>\n" +
            "<head><title>" + title + "</title></head>\n" +
            "<body>\n" +
               "<h1 align = \"center\">" + title + "</h1>\n" + 
                 kimenet + 
            "</body>" +
         "</html>"
      );
   }
            ]]></programlisting>
            A <function>setContentType</function> függvény segítségével 
            be tudjuk állítani, hogy milyen fomrátumban küldje a szerver a kért
            reprezentációt. Jelen esetben mi ezt egy HTML formátumban kérjük. 
            A hibás működés elkerülése érdekében kezelni kell azt az esetet, ha 
            a felhasználó elfelejti megadni a bemenetet. Ha van bemenetünk, akkor
            a <function>CreateStringBuffer</function> segítségével felépítjük, és
            kiírjuk a fát a bufferbe. A <function>PrintWriter</function> 
            osztály segítségével megírjuk, hogy hogyan nézzen ki a válasz, mit
            tartalmazzon. Lényegében egy klasszikus html fájlt hozunk létre. 
            Ha a fenti paranccsal fordítjuk a forrást, akkor ideális esetben 
            kapunk két <filename>.class</filename> fájlt. Mind a kettőt be kell
            másolni a fentebb megadott helyre, és módosítani kell az xml-fájlt. 
            Mielőtt bemásoljuk a class-okat, ellenőrizni kell, hogy
            le van-e állítva a Tomcat server. Ha nincs, le kell állítani, majd a 
            módosítások után be kell írni a következőt:
            <programlisting><![CDATA[
                http://localhost:8080/LZWBinFa?bemenet=szöveg
            ]]></programlisting>
        </para>
    </section>        
        
    <section>
        <title>Gagyi</title>
        <para>
            Az ismert formális
            <function><![CDATA[„while (x <= t && x >= t && t != x);"]]></function> tesztkérdéstípusra adj a szokásosnál
            (miszerint x, t az egyik esetben az objektum által hordozott érték, a másikban meg az objektum
            referenciája) „mélyebb” választ, írj Java példaprogramot mely egyszer végtelen ciklus, más x, t
            értékekkel meg nem! A példát építsd a JDK Integer.java forrására3
            , hogy a 128-nál inkluzív objektum
            példányokat poolozza!
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Java <function>Integer</function> osztálya 
            a 128-nál kisebb egészeket pool-ozza. Ez abban nyilvánul meg, hogy 
            ha példányosítunk egy <function>Integer</function> objektumot ami 
            128-nál kisebb értéket kap, akkor az objektum referencia ugyanarra a 
            memóriaterületre hivatkozik. Mert úgynevezett pooling megy a háttérben, hogy a 128-nál kisebb értékű Integer objektumokat csak egyetlen példányban hozza létre, viszont a 128-nál nagyobbak esetén mindig új példányt hozunk létre.
        </para>
        <para>
            Érdekesség képpen nézzük meg az alábbi kódot:
            <programlisting language="java"><![CDATA[
                Integer i1 = new Integer(127);
                Integer i2 = new Integer(127);
                System.out.println(i1 == i2); //  true
            ]]></programlisting>
        
            <programlisting language="java"><![CDATA[
                Integer i1 = new Integer(128);
                Integer i2 = new Integer(128);
                System.out.println(i1 == i2); //  false
            ]]></programlisting>
        
            Az történik, hogy a <function>==</function> összehasonlítjuk, hogy a változók ugyanazt az objektumot mutatják-e. 
            Az eredmény eltérhet attól függően, hogy milyen JVM-et használunk.
            A megoldás ennek a kiküszöbölésére az, hogy az <function>Integer Objektumok</function> 
            összehasonlításakor mindig az <function>Integer.equals ()</function> metódust használjuk.
            
            <programlisting language="java"><![CDATA[
            System.out.println(i1.equals(i2)); //  true
            ]]></programlisting>
        </para>
        <para>
            Valójában, amikor ezt a funkciót először bevezették a Java 5-be, a tartományt –127 és +127 között rögzítették. Később a Java 6-ban a tartomány csúcspontját a <function>java.lang.Integer.IntegerCache.high</function>-ra jelölték.
            IntegerCache széleskörűen dokumentálva van a JDK-ban.
            <programlisting language="java"><![CDATA[
                /**
     * Cache to support the object identity semantics of autoboxing for values between
     * -128 and 127 (inclusive) as required by JLS.
     *
     * The cache is initialized on first usage.  The size of the cache
     * may be controlled by the {@code -XX:AutoBoxCacheMax=} option.
     * During VM initialization, java.lang.Integer.IntegerCache.high property
     * may be set and saved in the private system properties in the
     * sun.misc.VM class.
     */

    private static class IntegerCache {
        static final int low = -128;
        static final int high;
        static final Integer cache[];

        static {
            // high value may be configured by property
            int h = 127;
            String integerCacheHighPropValue =
                sun.misc.VM.getSavedProperty("java.lang.Integer.IntegerCache.high");
            if (integerCacheHighPropValue != null) {
                try {
                    int i = parseInt(integerCacheHighPropValue);
                    i = Math.max(i, 127);
                    // Maximum array size is Integer.MAX_VALUE
                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
                } catch( NumberFormatException nfe) {
                    // If the property cannot be parsed into an int, ignore it.
                }
            }
            high = h;

            cache = new Integer[(high - low) + 1];
            int j = low;
            for(int k = 0; k < cache.length; k++)
                cache[k] = new Integer(j++);

            // range [-128, 127] must be interned (JLS7 5.1.7)
            assert IntegerCache.high >= 127;
        }

        private IntegerCache() {}
    }
            ]]></programlisting>
            
            Ha az érték String, akkor a parseInt segítségével konvertáljuk egyszerű int értékké. Ha a bemenet a tartományban van -128 és 127, akkor az Integer objektumot mindig visszaadjuk egy belső IntegerCache-nek. Az Integer osztály belső statikus IntegerCache osztályt tart fent, amely gyorsítótárként szolgál és az egész Objektumok -128 és 127 között tartja, ezért tapasztalható az, hogy ha megpróbálunk egész szám objektumot kapni a 127-re akkor mindig ugyanazt az objektumot kapjuk.
        
        
        
            Jogosan adódik a kérdés, hogy annak idején miért választották a –127 és 127 közötti számtartományt. 
            A válasz roppant egyszerű: Ez az egész számok legszélesebb körű tartománya. 
        </para>
        <para>
            Ezek után nézzük a forrást:
            <programlisting language="java"><![CDATA[
class Gagyi{
	public static void main (String[] args){
            if (args.length != 2){
                System.out.println("Használat: java Gagyi szám");
                return;
            }
            
            Integer x = Integer.parseInt(args[0]);
            Integer t = Integer.parseInt(args[0]);
                
            while (x >= t && x <= t && x != t){
                System.out.println("Gagyiiii");
            }
	}
} 
            ]]></programlisting>
            A program 1 egész számot kér paraméterként, majd ezek értékét átadjuk
            x és t objektumreferenciáknak. Ezután pedig végrehajtjuk a feladatban megadott
            ciklust. Első ránézésre azt hisszük, hogy azt vizsgáljuk, hogy teljesül-e az, hogy <function>x</function> és
            <function>t</function> egyenlő, emellett pedig <function>x</function> és 
            <function>t</function> nem egyenlő. Viszont Java-ban létezik az automatikus 
            csomagolás fogalma. Ennek annyi a lényege, hogy a program autmatikusan 
            kicsomagolja az <function>Integer</function> osztály értékét, abban az 
            esetben, ha ez szükséges. Például a <function><![CDATA[<=, >=]]></function>
            operátorok esetén megtörténik a kicsomagolás. Ellenben a
            <function><![CDATA[!=]]></function> operátor objektum referenciákat
            hasonlít össze. Ha a két <function>Integer</function> objektum 
            értéke ugyanaz, és 128-nál kisebb az értéke, akkor nem lépünk be a 
            végtelen ciklusba. Ellenben ha 127-nél nagyobb egészt adunk meg, akkor
            viszont belépünk, amiatt, mert ebben az esetben az objektum referenciák
            különbözőek lesznek.
        </para>
    </section>    
    
    <section>
        <title>Yoda</title>
        <para>
            Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda
            conditions-t! 
        </para>
        <para>
            <link xlink:href="https://en.wikipedia.org/wiki/Yoda_conditions">https://en.wikipedia.org/wiki/Yoda_conditions</link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            Azért találták ki ezt, hogy megkönnyítsék a programozók számára az elírások kiszűrését,
            abban az esetben, amikor egyenlőséget vizsgálnak.
            Főleg akkor érdemes használni, amikor a változókat nem változóval hasonlítjuk össze, hanem
            valamilyen konstanssal.
            <programlisting language = "java"><![CDATA[
Integer a = 5;
//Yoda használata nélkül
if (a == 6)
  //valamit csinál 

//Yoda használatával     
if (6 == a)
   //valamit csinál
            ]]></programlisting>
            Ahogy látható a Yoda conditions lényege, hogy felcseréljük a feltételben a 
            változót a konstanssal. Ez a technika megkönnyíti a hibakeresését például 
            ebben az esetben:
            <programlisting language= "java"><![CDATA[
if (6 = a)          if (a = 6)
            ]]></programlisting>
            Ha így írjuk a feltételt, akkor is működni fog a program, de az 
            <function>if</function>-be mindig be fog lépni a vezérlés, mivel 
            annak fejlécében csak értéket adunk át, és nem feltételt vizsgálunk.
            Ezzel az a probléma, hogy a program nem megfelelően működik, viszont erről
            nem kapunk visszajelzést.
            Ha jobban szemügyre vesszük, akkor bizonyítást nyer az,
            hogy az első esetben sokkal egyszerűbb észrevenni, hogy valami probléma van mint a másodiknál.
        </para>
        <para>
            Most, hogy tudjuk, mi is az a Yoda conditions, lássuk a feladat 
            megoldását.
            <programlisting language="java"><![CDATA[
class Yoda{
    public static void main (String[] args){
        String a = null;

        if(a.equals("Yoda")){
//        if("Yoda".equals(a)){
            System.out.println("Yoda");
            }
        }
    }  
} 
            ]]></programlisting>
            Jelen álllapotában a program kivételt dob, pontosan
            a java.lang.NullPointerEx-et. Ez annak köszönhető, hogy
            az <function>a</function> objektum refencia <function>null</function>
            értékű, és ennek a tagfüggvényét hívjuk meg. Mivel nem létező 
            objektumra mutat hivatkozik, ezért kapunk hibát. Viszont a 
            kikommentezett feltételt használva már nem kapunk hibát. Ez annak
            köszönhető, hogy a beírt szöveg egyből <function>String</function>-é
            konvertálódik, és el tudjuk érni annak tagfüggvényeit.
        </para>
        <para>
            Egy szó is száz a lényeg az, hogy igen kis hasznos program ez és kijelenthetjük, hogy bizonyos esetben igazán hasznos lehet.
        </para>
    </section>
    
    <section>
        <title>Kódolás from scratch</title>
        <para>
            Induljunk ki ebből a tudományos közleményből: <link xlink:href="http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbpalg.pdf">http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbpalg.pdf</link>
            és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
        </para>
        <para>
            Ha megakadsz, de csak végső esetben: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/
            javat-tanitokjavat/apbs02.html#pi_jegyei">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitokjavat/apbs02.html#pi_jegyei</link>
            (mert ha csak lemásolod, akkor pont az a fejlesztői élmény marad ki,
            melyet szeretném, ha átélnél).
        </para>
        <para>
            <link xlink:href="https://en.wikipedia.org/wiki/Yoda_conditions">https://en.wikipedia.org/wiki/Yoda_conditions</link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
           <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A BBP, teljes nevén Bailey-Borwein-Plouffe algoritmus a Pi hexadecimális
            jegyeinek egy d>0 számjegytől történő kiszámolására szolgál. Az alapját
            a BBP formula jelenti, amit 1995-ben találtak ki.
        </para>
        <para>
            Maga az algoritmus a következő:
        </para>
        <para>
            {16<superscript>d</superscript>π} = {4{16<superscript>d</superscript>S1} − 2{16<superscript>d</superscript>S4} − {16<superscript>d</superscript>S5} − {16<superscript>d</superscript>S6}}
        </para>
        <para>
            A feladat ennek az algoritmusnak az implementálása.
            <programlisting><![CDATA[
class PiBBP{
    //{16^dπ} = {4{16^dS1} − 2{16^dS4} − {16^dS5} − {16^dS6}}
    public double result;
    public String HexaJegyek;
    public PiBBP(int d){
        double d16S1 = dj16s(d,1);
        double d16S2 = dj16s(d,4);
        double d16S3 = dj16s(d,5);
        double d16S4 = dj16s(d, 6);
        
        double temp = 4.0d*d16S1 - 2.0d*d16S2 - d16S3 - d16S4;
        
        result = temp - java.lang.StrictMath.floor(temp);
        
        StringBuffer sb = new StringBuffer();
        
        Character hexaJegyek[] = {'A', 'B', 'C', 'D', 'E', 'F'};
        
        while(result != 0.0d) {
            
            int jegy = (int)StrictMath.floor(16.0d*result);
            
            if(jegy<10)
                sb.append(jegy);
            else
                sb.append(hexaJegyek[jegy-10]);
            
            result = (16.0d*result) - StrictMath.floor(16.0d*result);
        }
        
        HexaJegyek = sb.toString();

        
    }
    
    
    public double dj16s(int d, int j){
        double sum = 0;
        for(int k = 0; k <= d; ++k){
            sum += binmodk(8*k+j, d-k) / (double)(8*k + j);
        }
        sum -= java.lang.StrictMath.floor(sum);
        
//        long iPart = (long) sum;
//        Double fpart = sum -iPart;
        
        System.out.println(sum);
        return sum;
    }
    
    public double binmodk(int k, int d){
        int t = 1;
        double r = 1.0;
        while(t <= d){
            t *= 2;
        }
        
        while(t < 1){
            if(d >= t){
                r = (16*r) % k;
                d = d-t;
            }
            t = t/2;
            if (t >= 1){
                r = (r*r) % k;
            }
        }
//        System.out.println(r);
        return r;
    }
    
    public static void main(String[] args){
       PiBBP m_pibbp = new PiBBP(10000000);
       System.out.println(m_pibbp.HexaJegyek);
    }
}

            ]]></programlisting>
        </para>  
    </section>  
    
   <section>
        <title>EPAM: Java Object metódusok</title>
        <para>
            
        </para>
        <para>
                         
        </para>
    </section>      
	<section>
        <title>EPAM: Eljárásorientál vs Objektumorientált</title>
        <para>
            
        </para>
        <para>
                         
        </para>
    </section>
    <section>
        <title>EPAM: Objektum példányosítás programozási mintákkal</title>
        <para>
            
        </para>
        <para>
                         
        </para>
    </section>
 


</chapter>
