<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Port scan</title>
        <para>
            Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
        </para>
        <para>
            <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287</link>
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Java nyelvben kiemelt szerepe van a kivételkezelésnek, ugyanis szerves része a nyelvnek.
            Sok esetben a Java VM nem is engedi fordítani a kódot, ha nem kezeljük a lehetséges kivételeket. 
            A továbbiakban arról fogunk beszélni, hogy miért érdemes használni a hibakezelést és mit is csinál ez pontosan. 
        </para>
        <para>
            A kivétel a program végrehatása során keletkezik, mely megszakítja az utsaítások végrehajtását.   
            A nem objektumorientált nyelvekben, mint a C, minden gyanús helyen külön kellett
            kezelnünk az egyes kivételeket, mely egy hibaüzenet kiírásából és a program leállításából állt. Ezzel szemben C++/Java-ban akár egy helyen is kezelhetjük őket. 
            Az alap szintaxisa a objektum orientált nyelvekben a kivételkezelésnek a következő:
            <programlisting language="c++">
                try{
                    ....
                }
                catch(kivétel deklaráció) {
                    ....
                }
                finally{
                    ....
                }
            </programlisting>
            Annyit csinálunk, hogy a vizsgálni kívánt kódrészt egyszerűen behelyezzük egy <function>try</function> blokkba, majd pedig tetszőleges számú <function>catch</function> blokk
            segítségével kezeljük a kivételeket. A <function>finally</function> blokk mindig meghívódik, függetlenül attól, hoyg történt-e kivételdobás vagy sem. 
            Ebben a blokban tehetjük meg, hogy bezárjuk a megnyitott fájlokat amire már nem lesz szükségünk. 
            Ahhoz, hogy kivételkezeléssel tudjunk foglalkozni, ahhoz kellenek kivételek, melyeket a metódusok a <function>throw</function> kulcsszóval teszik lehetővé. 
            Ezután vesszővel elválasztva tudjuk felsorolni a dobható kivételek típusát. A Java nyelv több osztályt biztosít a kivételek kezeléséhez, melyek mind
            a <classname>Throwable</classname> osztály leszármazottai. De mi is hozhatunk létre saját osztályt ennek érdekében. 
        </para>
        <para>
           A kódunk a következőképpen néz ki:
            <programlisting language="java"><![CDATA[
public class KapuSzkenner {

    public static void main(String[] args) {
        
        for(int i=0; i<1024; ++i)
            
            try {
                
                java.net.Socket socket = new java.net.Socket(args[0], i);
                
                System.out.println(i + " figyeli");
                
                socket.close();
                
            } catch (Exception e) {
                
                System.out.println(i + " nem figyeli");
                
            }
    }
    
}]]>
            </programlisting>
            A program futtatása során annyi történik, hogy a prancssori argumentumként kapott számítógép 1024-nél kisebb portjaihoz próbálunk kapcsolódni. Java-ban a 
            kapcsolódáshoz egy <classname>Socket</classname> típusú objektumra van szükségünk. Ennek a konstruktorába meg kell adni az 
            IP-címet és a portot, ahova csatlakozni szeretnénk. Viszont adódik az a kérdés, hogy mi van akkor ha nem tudunk csatlakozni a megadott porthoz? 
            Abban az esetben a <varname>socket</varname> objektumunk konstruktora <classname>IOException</classname> típusú kivételt dob. Ha tudunk csatlakozni, akkor
            a cél gép adott portján egy szerver folyamat üzemel, ellenkező esetben pedig nem. Mivel dobhat kivételt a programunk, ezért azt  le kell kezelnünk, 
            vagyis berakjuk egy <function>try-catch</function> blokkba. Ha nem dob hibát a csatlakozás során a program, akkor kiírjuk a terminálba, hogy 
            az adott port figyelt, hiba esetén pedig azt, hogy nem figyelt.
        </para>
    </section>        

    <section>
        <title>AOP</title>
        <para>
            Szőj bele egy átszövő vonatkozást az első védési programod Java átiratába! (Sztenderd védési
            feladat volt korábban.)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:               
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A feladat megoldása során azzal fogunk megismerkedni, hogy az AspectJ programozási nyelv használatával, hogy tudjuk azt elérni, hogy egy régi programunkban ha szeretnénk bármilyen változást eszközölni, akkor, hogy tehetjük azt meg úgy, hogy nem nyúlunk bele a forráskódba. Helyette írunk egy szöveges (aspect-et) mely megoldja a módosítást.
        </para>
        <para>
            Mielőtt a kódot megnéznénk pár dolgot érdemes említeni az aspektusok felépítéséről.
            Ezek nem használhatók önnálóan ezért szükséges mindig hozzá egy program.
            Ha ezzel megvagyunk, akkor létrehozunk egy aspektust ami nagyon hasonlít egy Java osztályra.
            Viszont a létrehozás előtt érdemes három fogalommal megismerkedni.
            Az egyik a <emphasis role="strong">kapcsolódási pont</emphasis>, mely 
            az eredeti programban van, vagyis az erdeti program egyik függvénye. A másik fontos fogalom a <emphasis role="strong">vágási pont</emphasis>, mely az aspektus része, és 
            a csatlakozási pontokat jelöljük vele. Végül még szükség van <emphasis role="strong">tanácsra</emphasis>, mely lényegében azt tartalmazza, hogy 
            hogyan szeretnénk módosítani az eredeti program működését. 
        </para>
        <para>
            Azt fogjuk megoldani, hogy a programunk a fát preorder módon járja be.
            Az <filename>Aspect.j</filename> fálj tartalma a következő.
            <programlisting language="java"><![CDATA[
privileged aspect Aspect{
    void around(LZWBinFa fa, LZWBinFa.Csomopont elem, java.io.BufferedWriter os):
        call(public void LZWBinFa.kiir(LZWBinFa.Csomopont, java.io.BufferedWriter)) 
            && target(fa) && args(elem, os){
        if (elem != null)
        {
            try{
                ++fa.melyseg;
                for (int i = 0; i < fa.melyseg; ++i)
                    os.write("---");
                os.write(elem.getBetu () + "(" + (fa.melyseg - 1) + ")\n");
                fa.kiir(elem.egyesGyermek (), os);
                fa.kiir(elem.nullasGyermek (), os);
                --fa.melyseg;
            }
            catch(java.io.IOException e){
                System.out.println("Csomópont írása nem sikerült.");
            }
        }

    }
}]]>
            </programlisting>
            Az első fontos észrevétel, hogy szerepel a <function>privileged</function> mely azt szolgálja, hogy az aspektusunk hozzá tudjon férni az osztályok privát tagjaihoz. Az <function>aspect</function> szó meg azt jelöli, hogy most aspektust írunk, nem pedig hagyományos osztályt. 
            Az aspektusunk egyetlen függvényből áll, ami az <function>around</function>. Ahhoz, hogy a bejárás módját módosítani tudjuk elsőnek 
            a <function>kiir(Csomopont, BufferedWriter)</function> függvényre vany szükségünk. Mivel ez a függvény olyan tagváltozókat és tagfüggvényeket tartalmaz, melyek nem statikusak, ezért 
            az <function>around</function> függvény paraméterének meg kell adnunk egy <classname>LZWBinFa</classname> objektumot, melyen keresztül ezeket a tagokat el tudjuk érni. 
            Majd megadjuk, hogy az <function>around</function> melyik függvény helyett hívódjon meg, ehhez meg kell adnunk a teljes paraméterlistáját, mivel enélkül a fordító nem tudná
            egyértelműen azonosítani, melyikre gondolunk. Ezután <![CDATA[&&]]> elválasztva megadjuk, hogy az <function>around</function> paraméterei közül melyiket szeretnénk paraméterként
            átadni a <function>kiir</function> függvénynek, és azt is, hogy melyik <classname>LZWBinFa</classname> objektumra szeretnénk végrehajtani a függvényt. Az előbbihez a 
            <function>args</function>, utóbbihoz a <function>target</function> kulcsszót használjuk. Ezután következik az <function>around</function> függvény törzse, mely 
            a már ismert kódrészletet tartalmazza.
        </para>
        <caution>
            <title>Program futtatása</title>
            <para>
                <programlisting language="bash">
sudo apt install aspectj
ajc LZWBinFa.java Aspect.aj
java -cp /usr/share/java/aspectjrt.jar:. LZWBinFa input.txt -o output.txt
                </programlisting>
            </para>
        </caution>
        <para>
            A alap programunk a következő kimenetet adja a <filename>input.txt</filename>-ben található szövegre:
            <programlisting>
---------1(2)
------------0(3)
------------------1(5)
---------------0(4)
------1(1)
---------0(2)
------------0(3)
---------------0(4)
---/(0)
---------1(2)
------0(1)
---------0(2)
------------0(3)
depth = 5
mean = 3.5
var = 1.2909944487358056
            </programlisting>
            Aspektus használatával pedig a következőt:
            <programlisting>
---/(0)
------1(1)
---------1(2)
------------0(3)
---------------0(4)
------------------1(5)
---------0(2)
------------0(3)
---------------0(4)
------0(1)
---------1(2)
---------0(2)
------------0(3)
depth = 5
mean = 3.5
var = 1.2909944487358056
            </programlisting>
            Az aspektusok legnagyobb előnye az, hogy nem szükséges komolyabban 
            belenyúlnunk a régi kódunkba ahhoz, hogy módosítsunk a működésén. 
        </para>
    </section>        
        
    <section>
        <title>
            <emphasis role="cadiumgreen">Android Játék</emphasis>
        </title>
        <para>
            Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
    </section>
    <section>
        <title>JUnit teszt</title>
        <para>
            A <link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat">https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat</link>
            poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
            volt korábban).
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:        
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A JUnit a Java nyelvhez kifejlesztett egységtesztelő keretrendszer. Segítségével automatizált módon tudjuk tesztelni, hogy a programunk a várt módon működik-e. 
            Azt fogjuk megnézni, hogy a szórás és az átlag értékek megfelelnek-e annak, amit korábban láttunk. A 
            NetBeans-ben létre kell hoznunk egy projektet, amibe belerakjuk a <classname>LZWBinFa</classname> osztály forrását, majd ha erre rákattintunk a 
            Tools menüpontban létrehozunk egy tesztet.
            Ha elkészítettük a tesztet, akkor a "Test Libraries"-hez hozzá kell adni a Junit 4.x könyvtárát. Majd megnyítjuk  
            újra a projektet. Ezután pedig a forrásunkra kattintva jobb egér gombbal lesz egy olyan opció, hogy 
            "Test file". Ha minden okés, akkor lefut a teszt hiba nélkül.
        </para>
        <para>
            Teszthez tartozó forrás a következő:
            <programlisting language="java"><![CDATA[
import static junit.framework.TestCase.assertEquals;
import org.junit.Test;

public class LZWBinFaTest {
    LZWBinFa binfa = new LZWBinFa();
    
    @Test
    public void testHozzarendel() {
        char[] minta = "01111001001001000111".toCharArray();
        
        for(char betu: minta ){
            binfa.hozzarendel(betu);
        }
        
        assertEquals(4, binfa.getMelyseg());
        assertEquals(2.75, binfa.getAtlag(), 0.01);
        assertEquals(0.957427, binfa.getSzoras(), 0.000001);
    }    
    
}]]>           
            </programlisting>
            Szintaktikailag egy normál Java osztályt látunk. A különlegességét az adja, hogy tartalmazza a <![CDATA[@Test]]> makrót, melyel jelöljük, hogy ezután 
            egy tesztelő függvényt definiálunk. Az <classname>LZWBinFaTest</classname> osztályban példányosítunk egy <classname>LZWBinFa</classname> típusú objektumot. 
            Majd a <function>testHozzarendel</function> függvény segítségével teszteljük, hogy a <function>hozzarendel</function> függvény megfelelően építi-e fel a fát.
            A <varname>minta</varname> tömbben eltároljuk a honlapon található mintát, majd maszkolás nélkül belerakjuk az 1-eseket és a 0-ákat a fába. Ha ezzel végeztünk, 
            akkor a <function>assertEquals</function> függvény segítségével ellenőrizzük, hogy azokat a szórás, mélység és átlag értékeket kaptuk, amire számítottunk. 
            A forrásban ennek a függvénynek két verzióját használtuk. Az első esetben sima összehasonlítást végzünk, a többi esetben pedig megadunk egy delta számot, amivel 
            eltérhet a várt érték a kapott értéktől. Erre azért van szükség, mert nem egész számokat hasonlítunk össze.
            Valójában minden programban, ahol <type>double/float</type> típusú változókat hasonlítunk össze, ott szükséges lenne mindig megadni egy tetszőlegesen kicsi 
            delta számot, aminél ha kisebb az eltérés a két szám között, akkor egyenlőnek tartjuk őket.
        </para>
    </section>        

    <section>
        <title>
            OSCI
        </title>
        <para>
            Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit irányítasz az úton. 
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        
    </section>        


    <section>
        <title>
            <emphasis role="blue">OSCI2</emphasis>
        </title>
        <para>
            Készíts egyszerű C++/OpenGL-es megjelenítőt, amiben egy kocsit irányítasz az úton. A kocsi
            állapotát minden pillanatban mentsd le. Ezeket add át egy Prolog programnak, ami egyszerű reflex
            ágensként adjon vezérlést a kocsinak, hasonlítsd össze a kézi és a Prolog-os vezérlést. Módosítsd
            úgy a programodat, hogy ne csak kézzel lehessen vezérelni a kocsit, hanem a Prolog reflex ágens
            vezérelje!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
    </section>
    
    <section>
        <title>
            <emphasis role="blue">OSCI3</emphasis>
        </title>
        <para>
            Készíts egy OSM utakat megjelenítő C++/OpenGL-es progit!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
    </section>        
       
    <section>
        <title>EPAM: DI</title>
        <para>
            Implementálj egy alap DI (Dependency Injection) keretrendszert Java-ban annotációk és reflexió
        használatával megvalósítva az IoC-t (Inversion Of Control).
        </para>
    </section>  

    <section>
        <title>EPAM: JSON szerializáció</title>
        <para>
            Implementálj egy JSON szerializációs könyvtárat, mely képes kezelni sztringeket, számokat, listákat
        és beágyazott objektumokat. A megoldás meg kell feleljen az összes adott unit tesztnek.
        </para>
    </section>  

    <section>
        <title>EPAM: Kivételkezelés</title>
        <para>
            Adott az alábbi kódrészlet. Mi történik, ha az input változó 1F, “string” vagy pedig null? Meghívódik
        e minden esetben a finally ág? Válaszod indokold!
        </para>
    </section> 
</chapter>                
