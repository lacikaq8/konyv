<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Szoftmax Py MNIST</title>
        <para>
            Python
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/j7f9SkJR3oc">https://youtu.be/j7f9SkJR3oc</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0">https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0</link> (/tensorflow-0.9.0/tensorflow/examples/tutorials/mnist/), <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link>  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
			Az MNIST egy olyan program ami a Tensorflow alapot használja. A tensorflow egy mesterséges intelegenciához használt dolog gyakorlatilag a tensorflow keras segitsegevel probal szimulalni egy emberi agyat amelynek sajet neuralis halozata van amivel sajat magat tudja tanitani.Ebben a feladatban a program azt tanulja meg hogy vannak kezzelirt szamok 0-9 ig es a gep feladat hogy egyre nagyobb pontosságal eltalálja. Minél több ideig engedjük futtatni a programot egyre pontosabb lesz a számok felismerésével
		</para>
        <para>
			Na de nem is húzom tovább az időt ugorjunk fejest a forráskódba.
<programlisting><![CDATA[
import tensorflow as tf
]]></programlisting>
Itt beimporttáljuk a tensorflow deep learning könyvtárat. A tensorok igazából csak több dimenziós array-ek.
<programlisting><![CDATA[
mnist = tf.keras.datasets.mnist
]]></programlisting>
Itt hívjuk le a az mnist dataset-et ami 28x28 pixal nagyságú kézzel írt számok amiknek az értékük a címük.
<programlisting><![CDATA[
(x_train, y_train), (x_test, y_test) = mnist.load_data()
]]></programlisting>
Kicsomagoljuk a képeket az x_train/x_test -be és a y_train/y_test -be
<programlisting><![CDATA[
x_train, x_test = x_train / 255.0, x_test / 255.0
]]></programlisting>
Az x_train, x_test és x_train scaling-jét beállítjuk 1-255-re
<programlisting><![CDATA[
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
])
]]></programlisting>
Modellünket ezen a részen állítjuk be első sorba beállítjuk a Sequential modelre ami egy basic feed-forward model.
Flatten fogja a kapott 28x28 képeket és "kilapítja" 1x784-re. Következő sorba a neuronokat állítjuk be a mi esetünkbe
128 layer teljes összeköttetéssel.A harmadik sorba akadályozzuk meg overfitting-et.Utolsó sorba a dense kiértékeli 
a mátrxiokat bias értékükkel.
<programlisting><![CDATA[
loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)
]]></programlisting>
A losst beállítjuk egy alapértelmezett SparseCategoricalCrossentropy módra ami annyit tesz hogy a programunk a pontosságra fog törekedni. 
<programlisting><![CDATA[
model.compile(optimizer='adam',
              loss=loss_fn,
              metrics=['accuracy'])

]]></programlisting>
Itt compile-oljuk a modellünket az optimezert az adam-ra állítjuk, loss nak megadjuk a loss_fn-t és a metric-el
meg beállítjuk mit trackeljen. 
<programlisting><![CDATA[
model.fit(x_train, y_train, epochs=5)

model.evaluate(x_test,  y_test, verbose=2)

probability_model = tf.keras.Sequential([
  model,
  tf.keras.layers.Softmax()
])

			]]></programlisting>
			A model.fit-el megadjuk hogy hányszor fussunk át a modellekkel minnél többet adunk meg annál pontosabb
			eredményeket fogunk kapni de annál hosszabb lesz a program futási ideje.
		</para>
		<figure>
            <title>Futtatás</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/8/8.1.run.png" scale="60" />
                </imageobject>
                <textobject>
                    <phrase>Futtatás</phrase>
                </textobject>
            </mediaobject>
    </figure>
    <figure>
            <title>Eredmény</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/8/8.1.result.png" scale="60" />
                </imageobject>
                <textobject>
                    <phrase>Eredmény</phrase>
                </textobject>
            </mediaobject>
    </figure>
    <figure>
            <title>Terhelés</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/8/8.1.terheles.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>Terhelés</phrase>
                </textobject>
            </mediaobject>
    </figure>
    </section>        

<!--
    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->
    
    <section>
        <title>Mély MNIST</title>
        <para>
            Python            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
           A mély MNIST ugyanolyan mint az MNIST csak traning közbe jobban javul a pontossága és létrehoz egy gráfot a fejlődéséről amit nekem a
            C:\Users\asus\AppData\Local\Temp\ amit tensorboard meg lehet nyitni.
        </para>
        <para>
            A feladat amúgy nagyon megdolgoztatja a gépet mint a screenshotomról is látható hogy a 4 magos 8 szálas gépemen 100% -osan leterheli és a
            memóiát is nagyon szereti
        </para>
        <programlisting>
            <![CDATA[
Extracting /tmp/tensorflow/mnist/input_data\train-images-idx3-ubyte.gz
Extracting /tmp/tensorflow/mnist/input_data\train-labels-idx1-ubyte.gz
Extracting /tmp/tensorflow/mnist/input_data\t10k-images-idx3-ubyte.gz
Extracting /tmp/tensorflow/mnist/input_data\t10k-labels-idx1-ubyte.gz
Saving graph to: C:\Users\asus\AppData\Local\Temp\tmpopltx9xf
step 0, training accuracy 0.04
step 100, training accuracy 0.9
step 200, training accuracy 0.86
step 300, training accuracy 0.94
step 400, training accuracy 0.9
step 500, training accuracy 0.98
step 600, training accuracy 0.96
step 700, training accuracy 0.94
step 800, training accuracy 0.94
step 900, training accuracy 1
step 1000, training accuracy 1
step 1100, training accuracy 0.96
step 1200, training accuracy 0.98
step 1300, training accuracy 0.94
step 1400, training accuracy 0.96
step 1500, training accuracy 0.96
step 1600, training accuracy 0.94
step 1700, training accuracy 1
step 1800, training accuracy 1
step 1900, training accuracy 0.98
step 2000, training accuracy 0.98
step 2100, training accuracy 0.98
step 2200, training accuracy 0.98
step 2300, training accuracy 0.98
step 2400, training accuracy 0.98
step 2500, training accuracy 0.98
step 2600, training accuracy 0.98
step 2700, training accuracy 0.96
step 2800, training accuracy 1
step 2900, training accuracy 1
step 3000, training accuracy 1
step 3100, training accuracy 0.94
step 3200, training accuracy 1
step 3300, training accuracy 1
step 3400, training accuracy 0.94
step 3500, training accuracy 0.98
step 3600, training accuracy 1
step 3700, training accuracy 0.98
step 3800, training accuracy 0.94
step 3900, training accuracy 0.9
step 4000, training accuracy 0.98
step 4100, training accuracy 0.98
step 4200, training accuracy 1
step 4300, training accuracy 0.96
step 4400, training accuracy 1
]]>
        </programlisting>
        <programlisting language="python"> 
            <![CDATA[
# Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
"""A deep MNIST classifier using convolutional layers.
See extensive documentation at
https://www.tensorflow.org/get_started/mnist/pros
"""
# Disable linter warnings to maintain consistency with tutorial.
# pylint: disable=invalid-name
# pylint: disable=g-bad-import-order
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import argparse
import sys
import tempfile
from tensorflow.examples.tutorials.mnist import input_data
import tensorflow as tf
FLAGS = None
def deepnn(x):
  """deepnn builds the graph for a deep net for classifying digits.
  Args:
    x: an input tensor with the dimensions (N_examples, 784), where 784 is the
    number of pixels in a standard MNIST image.
  Returns:
    A tuple (y, keep_prob). y is a tensor of shape (N_examples, 10), with values
    equal to the logits of classifying the digit into one of 10 classes (the
    digits 0-9). keep_prob is a scalar placeholder for the probability of
    dropout.
  """
  # Reshape to use within a convolutional neural net.
  # Last dimension is for "features" - there is only one here, since images are
  # grayscale -- it would be 3 for an RGB image, 4 for RGBA, etc.
  with tf.name_scope('reshape'):
    x_image = tf.reshape(x, [-1, 28, 28, 1])
  # First convolutional layer - maps one grayscale image to 32 feature maps.
  with tf.name_scope('conv1'):
    W_conv1 = weight_variable([5, 5, 1, 32])
    b_conv1 = bias_variable([32])
    h_conv1 = tf.nn.relu(conv2d(x_image, W_conv1) + b_conv1)
  # Pooling layer - downsamples by 2X.
  with tf.name_scope('pool1'):
    h_pool1 = max_pool_2x2(h_conv1)
  # Second convolutional layer -- maps 32 feature maps to 64.
  with tf.name_scope('conv2'):
    W_conv2 = weight_variable([5, 5, 32, 64])
    b_conv2 = bias_variable([64])
    h_conv2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2)
  # Second pooling layer.
  with tf.name_scope('pool2'):
    h_pool2 = max_pool_2x2(h_conv2)
  # Fully connected layer 1 -- after 2 round of downsampling, our 28x28 image
  # is down to 7x7x64 feature maps -- maps this to 1024 features.
  with tf.name_scope('fc1'):
    W_fc1 = weight_variable([7 * 7 * 64, 1024])
    b_fc1 = bias_variable([1024])
    h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
    h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)
  # Dropout - controls the complexity of the model, prevents co-adaptation of
  # features.
  with tf.name_scope('dropout'):
    keep_prob = tf.placeholder(tf.float32)
    h_fc1_drop = tf.nn.dropout(h_fc1, keep_prob)
  # Map the 1024 features to 10 classes, one for each digit
  with tf.name_scope('fc2'):
    W_fc2 = weight_variable([1024, 10])
    b_fc2 = bias_variable([10])
    y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2
  return y_conv, keep_prob
def conv2d(x, W):
  """conv2d returns a 2d convolution layer with full stride."""
  return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')
def max_pool_2x2(x):
  """max_pool_2x2 downsamples a feature map by 2X."""
  return tf.nn.max_pool(x, ksize=[1, 2, 2, 1],
                        strides=[1, 2, 2, 1], padding='SAME')
def weight_variable(shape):
  """weight_variable generates a weight variable of a given shape."""
  initial = tf.truncated_normal(shape, stddev=0.1)
  return tf.Variable(initial)
def bias_variable(shape):
  """bias_variable generates a bias variable of a given shape."""
  initial = tf.constant(0.1, shape=shape)
  return tf.Variable(initial)
def main(_):
  # Import data
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)
  # Create the model
  x = tf.placeholder(tf.float32, [None, 784])
  # Define loss and optimizer
  y_ = tf.placeholder(tf.float32, [None, 10])
  # Build the graph for the deep net
  y_conv, keep_prob = deepnn(x)
  with tf.name_scope('loss'):
    cross_entropy = tf.nn.softmax_cross_entropy_with_logits(labels=y_,
                                                            logits=y_conv)
  cross_entropy = tf.reduce_mean(cross_entropy)
  with tf.name_scope('adam_optimizer'):
    train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)
  with tf.name_scope('accuracy'):
    correct_prediction = tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))
    correct_prediction = tf.cast(correct_prediction, tf.float32)
  accuracy = tf.reduce_mean(correct_prediction)
  graph_location = tempfile.mkdtemp()
  print('Saving graph to: %s' % graph_location)
  train_writer = tf.summary.FileWriter(graph_location)
  train_writer.add_graph(tf.get_default_graph())
  with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for i in range(20000):
      batch = mnist.train.next_batch(50)
      if i % 100 == 0:
        train_accuracy = accuracy.eval(feed_dict={
            x: batch[0], y_: batch[1], keep_prob: 1.0})
        print('step %d, training accuracy %g' % (i, train_accuracy))
      train_step.run(feed_dict={x: batch[0], y_: batch[1], keep_prob: 0.5})
    print('test accuracy %g' % accuracy.eval(feed_dict={
        x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))
if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--data_dir', type=str,
                      default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS, unparsed = parser.parse_known_args()
  tf.app.run(main=main, argv=[sys.argv[0]] + unparsed)
            ]]>
        </programlisting>
        <para></para>
        <figure>
            <title></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/8/8.2.1.png" scale="25" />
                </imageobject>
                <textobject>
                    <phrase></phrase>
                </textobject>
            </mediaobject>
    </figure>
    <figure>
            <title></title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/8/8.2.2.png" scale="25" />
                </imageobject>
                <textobject>
                    <phrase></phrase>
                </textobject>
            </mediaobject>
    </figure>
    <figure>
            <title>Terhelés</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/8/8.2.3.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>Terhelés</phrase>
                </textobject>
            </mediaobject>
    </figure>
    </section>        
<!--
    <section>
        <title>Deep dream</title>
        <para>
            Keras            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->                  
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/bAPSu3Rndi8">https://youtu.be/bAPSu3Rndi8</link>      
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        

</chapter>                
