<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Berners-Lee!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>C++ és Java összehasonlítása</title>
        <caution>
            <title>Feladat megoldásához szükséges források</title>
            <para>
                C++: Benedek Zoltán, Levendovszky Tihamér Szoftverfejlesztés C++ nyelven
            </para>
            <para>
                Java: Nyékyné Dr. Gaizler Judit et al. Java 2 útikalauz programozóknak 5.0 I-II. 
            </para>
        </caution>
        <para>
            Ebből a két könyvből pár oldalas esszé jellegű kidolgozást kérek, Java és C++
            összehasonlítás mentén, pl. kb.: kifejezés fogalom ua., Javában minden objektum
            referencia, mindig dinamikus a kötés, minden függvény virtuális, klónozás stb.
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Java nyelv a C++ továbbgondolásának tekinthető. Az egyik 
            legfontosabb különbség, hogy a Java interpreteres nyelv, tehát nem
            klasszikus fordítással nyerünk ki a forrásfájlból gépi kódot, hanem
            a Java interpreter segítségével. Viszont ez nem egy hagyományos
            értelembe vett gépi kódot hoz létre, hanem a Java Virtual Machine
            számára futtatható állományt. A JVM az egyik legnagyobb előnye a 
            Javanak, mert ennek segítségével a bármely platformon elérhető, és 
            hordozható kódot tudunk írni.  
        </para>
        <para>
            A Java és a C++ alapvető szintaxisa nagyon hasonlít. Érdekesség
            ellenben, hogy a Java-ban nincs meg a klasszikus main-fájl, ami
            tartalmazza a program futásához szükséges <function>main</function>
            függvényt. Ugyanis ez a függvény egy osztályba van beágyazva. Ez annak
            a következménye, hogy Java-ban minden metódus, változó valamilyen osztálynak
            a tagja. A <function>main</function> függvényt <function>public</function>-nak
            és <function>static</function>-nak kell deklarálni. Nem lehet
            visszatérési értéke, ennek következtében <function>void</function>,
            szemben a C++-szal. Egy másik eltérés, hogy a paraméterlistája 
            <function>String</function>-ek tömbje, melyben nem szerepel 
            magának a programnak a neve, csak a parancssori argumentumok.
        </para>
        <para>
            Java-ban a típusokat két fő csoportra oszthatjuk, ezek a primitív és
            a nem primitív típusok. A primitív típusok magát az értéket tárolják.
            Ezzel szemben a nem primitív típusok objektumhivatkozások. A Java
            nyelv lehetővé teszi a primitív típusok "objektumosítását". Tehát
            az <function>int</function> típust helyettesíthetjük <function>Integer</function>
            típussal. Jelen esetben az <function>Integer</function> egy 
            csomagoló osztály. A Java 5-ös verziójától lehetővé vált az ezen
            típusok közötti automatikus be- és kicsomagolás. Nem létezik a 
            <function>char*</function> Java-ban, ehelyett egy beépített
            osztályt használhatunk, a <function>String</function>-et. A C++-al
            ellentétben a tömbök nem a pointerek másik megnyilvánulási formái, hanem
            ezek is valódi típusok. Ennek köszönhetően elérhető a méretüket
            lekérdező függvény is, így nem szükséges azt tárolni egy másik
            változóban.  
        </para>
        <para>
            Osztályt a <function>class</function> kulcsszóval tudunk 
            deklarálni, ahogy azt már C++-ban megszoktuk. Minden osztály a 
            az <function>Object</function> osztály leszármazottja Java-ban.
            Fontos megjegyezni, hogy nem engedélyezett ellenben a többszörös
            öröklődés. A szűlőre a <function>super</function> referenciával
            hivatkozhatunk. Az osztály tagjainak láthatóságát egyenként kell beállítni.
            A C++-ban megszokott destruktorra Java-ban nincs szükség, mivel azt
            az automatikus szemétgyűjtögető helyettesíti. A másoló konstruktor
            helyett Javaban lehetőségünk van a <function>clone</function>
            metódus használatára. Ez alapesetben sekély másolást hajt végre,
            ezért szükséges bizonyos esetekben az adattagok külön lemásolása
            azok elkülönítése. Csak azok az osztályok támogatják a 
            másolást, amelyek implementálják a <function>Cloneable</function>
            interfészt.
            Mivel Java-ban, amikor
            példányosítunk egy objektumot, akkor egy objektumhivatkozást hozunk
            létre, ami egy adott tárterületen lévő objektumra mutat. Fontos 
            megjegyezni, hogy Java-ban nincsenek már pointerek, csak refernciák
            használata engedélyezett. Sablon osztályok helyett a Java bevezeti a
            generikusok fogalmát. A legfontosabb tulajdonsága a típustörlés,
            melynek lényege, hogy a paraméteres típust egy nem paraméteres
            típusra. Erre azért volt szükség, hogy a korábbi Java verziókkal
            való kompatibilitás ne sérüljön. 
        </para>
        <para>
            Az osztályok örökölhetnek a szülőosztálytól tagfüggvényeket. Bizonyos
            esetekben pedig előfordul, hogy ezeket szükséges felüldefiniálni.
            Ehhez C++-ban a <function>virtual</function> kulcsszóra volt szükség,
            viszont erre a Java-ban már nincs szükség. Ez annak dinamikus kötésnek 
            köszönhetően. Tehát az interpreter a dinamikus taghoz tartozó
            implementácóját használja a metódusnak. A dinamikus tag fogalom
            azzal van összefüggésben, hogy a poliformizmusnak miatt, 
            olyan helyen ahol állhat a gyermek, ott állhat a szülő osztályú objektum
            is. Ennek köszönhetően előfordulhat, hogy például egy szülő 
            osztályú objektumreferncia hivatkozhat gyermek osztályú objektumra,
            és viszont. 
        </para>
        <para>
            C++-ban ahhoz, hogy extra saját vagy beépített osztályokat
            metódusokat lehessen elérni, header fájlokat kellett a forrásunkba
            include-álni. Java-ban nincsenek header állományok, helyettük vannak
            csomagok, melyeket az <function>import</function> kulcsszóval tudjuk
            hozzáadni a forráshoz. Csomagokat mi is hozhatunk létre, ehhez a 
            fájl legelején a <function>package <![CDATA[[<név>]]></function>
            sort kell beírni. Többféleképpen importálhatunk.
            Lehetőségünk van a teljes osztályt, de még a publikus metódusait is
            hozzáadni. Fontos megjegyezni, hogy sokszor importálásra nem feltétlenül
            van szükség, csak tisztábbá teszi a kódot. Lehetőség van teljes
            fájlelérési úttal elérni egy csomag tartalmát. Annyi könnyebséget
            biztosít az interpreter, hogy elég az egyes mappákat, almappákat 
            pontokkal elválasztani. Ezeknek a csomagoknak köszönhetően
            Java-ban könnyen lehet hálózatkezelést, felhasználói felületet
            készíteni.
        </para>
    </section>        

    <section>
        <title>Gyors prototípus-fejlesztés Python és Java nyelven</title>
        <caution>
            <title>Feladat megoldásához szükséges források</title>
            <para>
                Python: Forstner Bertalan, Ekler Péter, Kelényi Imre: Bevezetés a mobilprogramozásba(35-51. oldal)
            </para>
        </caution>
        <para>
           Itt a kijelölt oldalakból egy 1 oldalas élmény-olvasónaplóra gondoltam.
        </para>
        <para>
            <emphasis role="strong">Tanulságok, tapasztalatok, magyarázat...</emphasis>
        </para>
        <para>
            A Python programozási nyelv Guido van Rossum nevéhez fűződik, aki 1990-ben alkotta meg.
        </para>
        <para>
            A már korábban tanult C, C++, nyelvekhez képest nagy előnye, hogy nincs szükség fordítóra.
            A forrásból az értelmező azonnal képes futtatni a programot. Ez a tulajdonsága abból következik,
             hogy a Python az egy szkriptnyelv. A komolyabb feladatok megoldása érdekében rengeteg kiegészítőket tartalmaz.
            A fejlesztők életét jelentősen megkönnyíti a standar Python kódkönyvtár, mely modulokat tartalmaz
            fájlkezeléshez, hálózatkezeléshez, rendszerhívásokhoz és felhasználói felület kialakításához is.
        </para>
        <para>
            A Python nyelv szintaxisa jelentősen egyszerűsített, mivel behúzás alapú. Tehát nincs szükség
            kapcsoszárójelekre a blokk elejének és végének jelöléséhez. A blokk addig tart ameddig az értelmező
            nem talál egy kisebb behúzású sort. Érdekesség még, hogy az utasításokat nem kell ";"-vel elválasztani,
            azok végét a sor vége jelzi. Persze előfordulhat, hogy egy utasítás nem fér ki egy sorba, ezt az
            értelmezőnek egy a sor végére írt "\"-jellel jelölhetjük. Ha nem zárunk be egy zárójelet, akkor is 
            a következő sort az utasítás folytatásának veszi.  
        </para>
        <para>
            Python-ban az adatokat objektumok reprezentálják. A C, C++, Java nyelvekhez hasonlóan az adatokon
            végrehajtható műveletek az objektum típusától függnek. Eltérés ezzel szemben, hogy nem kell explicit
            módon megadni az objektum típusát, azt az értelmező "kitalálja". Az adattípusok többsége a fentebb
            említett nyelvekhez hasonló. Ennél érdekesebb az ennesek, listák és szótárak használata. Mindháromra
            igaz, hogy az objektumoknak nem kell azonos típusúnak lennie, szemben a C/C++-ból ismert tömbökkel,
            vektorokkal. Az ennesek lényegében objektumok gyűjteményei, melyeket veszzővel választunk el. Ezeket
            sima zárójelek közé írjuk. A listák egy rendezett sorozatai az objektumoknak, melyeket szintén vesszővel
            válsztunk el, és szögletes zárójellel határolunk. Az elemeket a listában az indexükkel azonosítjuk.
            A szótárak pedig az objektumok mellett kulcsokat is tartalmaznak, ezekkel tudjuk az egyes elemeket
            azonosítani. Ebben a nyelvben a változók objektumokra mutató referenciák. Mivel a változóknak nincs
            típusuk, ezért bármilyen objektumra mutathatnak. Az értékadás a már ismert "="-lel történik. A 
            változóhozzárendeléseket a <function>del</function> kulszcsóval tehetjük meg. A hátramaradt objektumokat
            a <function>garbage collector</function> törli. Pythonban is léteznek globális és lokális változók.
            Egy lokális változót a <function>global</function> kulcsszóval tehetünk globálissá. A beépitett típusok
            között létezik típuskonverzió. Szekvenciákkal, ide tartoznak a listák, sztringek, ennesek, műveleteket
            hajthatunk végre, beépített függvényeket alkalmazhatunk.
        </para>
        <para>
            A Python biztosítja a hagyományos programnyelvi eszközöket. Tudunk kíirni szövegeket, változók értékét
            a konzolra. Létrehozhatunk if elágazásokat. Ebben eltérés, hogy az <function>else if</function> ágat
            <function>elif</function>-el jelöljük. A nyelv támogatja a ciklusokat, tehát a <function>while</function>,
            <function>for</function> ciklusok gond nélkül létrehozhatók. Egyedül a szintaktikájukban térnek el a 
            C/C++-os tól. A <function>for</function> cilusok esetén érdemes megemlíteni az <function>xrange</function>
            függvényt, amellyel megadhatjuk, hogy mettől meddig szeretnénk futtani a ciklusváltozót, és azt is, hogy 
            milyen lépésközzel. Készíthetünk címkéket is, melyet a <function>label</function> kulcsszóval jelölünk, és
            a <function>goto</function> utasítással tudjuk a vezérlést átugratni rá. Létezik egy másik kulcsszó is, a
            <function>comefrom</function>. Ennek a segítségével a cimkéből vissza lehet ugrani a hozzá tartozó
            <function>comefrom</function> részhez. 
        </para>
        <para>
            A függvényeket a <function>def</function> kulcsszóval tudjuk definiálni. Ezeknek lehetnek
            paramétereik, melyek csak érték szerint adhatók át, kivéve a listákat, szótárakat, melyeken
            való módosítás a híváshelyen lévő objektumra is végrehajtódik. A visszatérési értéküket nem 
            kell expliciten megadni, ahogy már a változóknál megszoktuk. Csak egy értékkel tudnak visszatérni,
            de lehet akár ennesekkel is.
        </para>
        <para>
            Mivel a Python támogatja az objektumorientált eljárásokat, ezért létrehozhatunk osztályokat is, melyet a 
            szokásos <function>class</function> kulcsszóval definiálunk. Jelentős különbség nincs a C/C++-ban megszokott
            osztályok alapvető működéséhez képest. Viszont Python-ban nem használhatunk <function>private</function>,
            <function>public</function>, <function>protected</function> címkéket. Ezeket a tagváltozó nevével tudjuk
            helyettesíteni. Ha nem rakunk aláhúzást elé, akkor publikus lesz. Abban az esetben, ha egy aláhúzás van a
            változó név elején, akkor <function>protected</function>, kettő esetén pedig <function>private</function>
            tagváltozóról beszélünk. Az osztály konstruktorát az <function>__init__</function> függvény 
            adja. Ennek első paramétere a <function>self</function>, vagyis maga a létrehozandó objektum.
        </para>
        <para>
            A Python a fejlesztés megkönnyítése érdekében modulokat tartalmaz. Ezeken
            belül vannak olyanok, melyek kifejezetten a mobilos fejlesztést segítik. Biztosítják a
            felhasználói felület kezelését(<function>appuifw</function>), hálózatkezelést(<function>messaging</function>,
            de a kamera(<function>camera</function>) elérését is megoldják. A <function>sysinfo</function>
            modul segítségével lekérdezhetjük a telefon adatait, az <function>audio modul</function>
            segítségével pedig hangfelvételeket hozhatunk létre, és azok lejátszását is biztosítja.
            Létrehozhatunk saját modulokat is, melyeket a programunkba importálhatunk.
        </para>
        <para>
            A kivételkezelés is egy ismert fogalom a Python nyelvben. A vizsgált blokkot, ahonnan a kivétel érkezhet,
            a <function>try</function> címkével jelöljük. Hiba esetén a vezérlés az <function>except</function>
            címkével jelölt blokkra ugrik. Lehet megadni <function>else</function> ágat is, plusz az 
            <function>else</function> és <function>except</function> helyett használhatjuk a
            <function>finally</function> címkét, melyhez tartozó kódrész főleg "takarításra" szolgál.
        </para>
    </section>        
        

</chapter>                
